class TreeNode:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

def pre_order_traversal(node):
    if node is not None:
        print(node.value, end=" ")
        pre_order_traversal(node.left)
        pre_order_traversal(node.right)

def in_order_traversal(node):
    if node is not None:
        in_order_traversal(node.left)
        print(node.value, end=" ")
        in_order_traversal(node.right)

def post_order_traversal(node):
    if node is not None:
        post_order_traversal(node.left)
        post_order_traversal(node.right)
        print(node.value, end=" ")

def level_order_traversal(root):
    if root is None:
        return
    
    queue = [root]
    
    while queue:
        node = queue.pop(0)
        print(node.value, end=" ")
        
        if node.left:
            queue.append(node.left)
        if node.right:
            queue.append(node.right)

# árvore de exemplo
root = TreeNode(1)
root.left = TreeNode(2)
root.right = TreeNode(3)
root.left.left = TreeNode(4)
root.left.right = TreeNode(5)
root.right.left = TreeNode(6)
root.right.right = TreeNode(7)

print("Pré-ordem:")
pre_order_traversal(root)
print("\n")

print("In-ordem:")
in_order_traversal(root)
print("\n")

print("Pós-ordem:")
post_order_traversal(root)
print("\n")

print("Ordem de níveis:")
level_order_traversal(root)
